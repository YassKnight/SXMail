package com.snxun.mp.greendaolib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.snxun.mp.greendaolib.table.EmailMessageTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMAIL_MESSAGE_TABLE".
*/
public class EmailMessageTableDao extends AbstractDao<EmailMessageTable, Long> {

    public static final String TABLENAME = "EMAIL_MESSAGE_TABLE";

    /**
     * Properties of entity EmailMessageTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uid = new Property(1, String.class, "uid", false, "UID");
        public final static Property From = new Property(2, String.class, "from", false, "FROM");
        public final static Property Addressee = new Property(3, String.class, "addressee", false, "ADDRESSEE");
        public final static Property User = new Property(4, String.class, "user", false, "USER");
        public final static Property Catalog = new Property(5, String.class, "catalog", false, "CATALOG");
        public final static Property Copying = new Property(6, String.class, "copying", false, "COPYING");
        public final static Property Airtight = new Property(7, String.class, "airtight", false, "AIRTIGHT");
        public final static Property SentData = new Property(8, String.class, "sentData", false, "SENT_DATA");
        public final static Property Subject = new Property(9, String.class, "subject", false, "SUBJECT");
        public final static Property IsHtml = new Property(10, boolean.class, "isHtml", false, "IS_HTML");
        public final static Property IsNew = new Property(11, boolean.class, "isNew", false, "IS_NEW");
        public final static Property Content = new Property(12, String.class, "content", false, "CONTENT");
        public final static Property AttachmentList = new Property(13, String.class, "attachmentList", false, "ATTACHMENT_LIST");
        public final static Property AttachmentUrl = new Property(14, String.class, "attachmentUrl", false, "ATTACHMENT_URL");
    }


    public EmailMessageTableDao(DaoConfig config) {
        super(config);
    }
    
    public EmailMessageTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMAIL_MESSAGE_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UID\" TEXT NOT NULL ," + // 1: uid
                "\"FROM\" TEXT NOT NULL ," + // 2: from
                "\"ADDRESSEE\" TEXT NOT NULL ," + // 3: addressee
                "\"USER\" TEXT NOT NULL ," + // 4: user
                "\"CATALOG\" TEXT NOT NULL ," + // 5: catalog
                "\"COPYING\" TEXT," + // 6: copying
                "\"AIRTIGHT\" TEXT," + // 7: airtight
                "\"SENT_DATA\" TEXT," + // 8: sentData
                "\"SUBJECT\" TEXT," + // 9: subject
                "\"IS_HTML\" INTEGER NOT NULL ," + // 10: isHtml
                "\"IS_NEW\" INTEGER NOT NULL ," + // 11: isNew
                "\"CONTENT\" TEXT," + // 12: content
                "\"ATTACHMENT_LIST\" TEXT," + // 13: attachmentList
                "\"ATTACHMENT_URL\" TEXT);"); // 14: attachmentUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMAIL_MESSAGE_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EmailMessageTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUid());
        stmt.bindString(3, entity.getFrom());
        stmt.bindString(4, entity.getAddressee());
        stmt.bindString(5, entity.getUser());
        stmt.bindString(6, entity.getCatalog());
 
        String copying = entity.getCopying();
        if (copying != null) {
            stmt.bindString(7, copying);
        }
 
        String airtight = entity.getAirtight();
        if (airtight != null) {
            stmt.bindString(8, airtight);
        }
 
        String sentData = entity.getSentData();
        if (sentData != null) {
            stmt.bindString(9, sentData);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(10, subject);
        }
        stmt.bindLong(11, entity.getIsHtml() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsNew() ? 1L: 0L);
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(13, content);
        }
 
        String attachmentList = entity.getAttachmentList();
        if (attachmentList != null) {
            stmt.bindString(14, attachmentList);
        }
 
        String attachmentUrl = entity.getAttachmentUrl();
        if (attachmentUrl != null) {
            stmt.bindString(15, attachmentUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EmailMessageTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUid());
        stmt.bindString(3, entity.getFrom());
        stmt.bindString(4, entity.getAddressee());
        stmt.bindString(5, entity.getUser());
        stmt.bindString(6, entity.getCatalog());
 
        String copying = entity.getCopying();
        if (copying != null) {
            stmt.bindString(7, copying);
        }
 
        String airtight = entity.getAirtight();
        if (airtight != null) {
            stmt.bindString(8, airtight);
        }
 
        String sentData = entity.getSentData();
        if (sentData != null) {
            stmt.bindString(9, sentData);
        }
 
        String subject = entity.getSubject();
        if (subject != null) {
            stmt.bindString(10, subject);
        }
        stmt.bindLong(11, entity.getIsHtml() ? 1L: 0L);
        stmt.bindLong(12, entity.getIsNew() ? 1L: 0L);
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(13, content);
        }
 
        String attachmentList = entity.getAttachmentList();
        if (attachmentList != null) {
            stmt.bindString(14, attachmentList);
        }
 
        String attachmentUrl = entity.getAttachmentUrl();
        if (attachmentUrl != null) {
            stmt.bindString(15, attachmentUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EmailMessageTable readEntity(Cursor cursor, int offset) {
        EmailMessageTable entity = new EmailMessageTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // uid
            cursor.getString(offset + 2), // from
            cursor.getString(offset + 3), // addressee
            cursor.getString(offset + 4), // user
            cursor.getString(offset + 5), // catalog
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // copying
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // airtight
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sentData
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // subject
            cursor.getShort(offset + 10) != 0, // isHtml
            cursor.getShort(offset + 11) != 0, // isNew
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // content
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // attachmentList
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // attachmentUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EmailMessageTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUid(cursor.getString(offset + 1));
        entity.setFrom(cursor.getString(offset + 2));
        entity.setAddressee(cursor.getString(offset + 3));
        entity.setUser(cursor.getString(offset + 4));
        entity.setCatalog(cursor.getString(offset + 5));
        entity.setCopying(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAirtight(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSentData(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSubject(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIsHtml(cursor.getShort(offset + 10) != 0);
        entity.setIsNew(cursor.getShort(offset + 11) != 0);
        entity.setContent(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setAttachmentList(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAttachmentUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EmailMessageTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EmailMessageTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EmailMessageTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
